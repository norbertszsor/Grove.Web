@page "/admin"
@using Grove.Transfer.Auth.Command
@using Grove.Transfer.Auth.Data
@using MediatR
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@rendermode InteractiveServer

@inject NavigationManager NavigationManager
@inject IMediator Mediator
@inject ProtectedSessionStorage ProtectedSessionStorage

<PageTitle>Grove.Auth</PageTitle>

<div class="container mt-4 d-flex flex-column justify-top-center align-items-center" style="height: 100vh;">
        <div class="login-form" style="width: 30%; background-color: #343a40; padding: 20px; border-radius: 5px;">
        <h3 class="text-center">Login</h3>

        <EditForm FormEmail="Login" Model="_authModel" OnValidSubmit="HandleAuth">
            <DataAnnotationsValidator />
            <div class="mb-3">
                <label for="name" style="margin-bottom:2px">Email</label>
                <InputText id="name" @bind-Value="_authModel.Email" class="form-control" />
                <ValidationMessage For="@(() => _authModel.Email)" />
            </div>
            <div class="mb-3">
                <label for="password" style="margin-bottom:2px">Password</label>
                <InputText id="password" @bind-Value="_authModel.Password" class="form-control" type="password" />
                <ValidationMessage For="@(() => _authModel.Password)" />
            </div>
            <button type="submit" class="btn btn-danger" style="width: 100%;">Login</button>
        </EditForm>
    </div>
    <div class="text-danger text-center">
        <span>@_errorMessage</span>
    </div>
</div>

@code {
    private readonly AuthModel _authModel = new();

    private string _errorMessage = string.Empty;

    private const string CredentialsErrorMessage = "Invalid Email or Password!";

    private const string AdminDashboardPath = "/coreadmin";

    private const string AuthDtoKey = nameof(AuthDto);

    private async Task HandleAuth()
    {
        try
        {
            _errorMessage = string.Empty;

            await GetOrCrateTokenAsync();

            NavigationManager.NavigateTo(AdminDashboardPath);
        }
        catch (Exception)
        {
            _errorMessage = CredentialsErrorMessage;
        }
    }

    private async Task GetOrCrateTokenAsync()
    {
        var authDto = await ProtectedSessionStorage.GetAsync<AuthDto>(AuthDtoKey);

        if (authDto.Value is null)
        {
            var result = await Mediator.Send(new AuthCommand
            {
                Email = _authModel.Email!,
                Password = _authModel.Password!
            });

            await ProtectedSessionStorage.SetAsync(AuthDtoKey, result);
        }
    }

    private class AuthModel
    {
        public string? Email { get; set; }
        public string? Password { get; set; }
    }
}

